{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Didi\\\\login-react\\\\src\\\\auth\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { auth, db, doc, setDoc, getDoc, collection, getDocs, query, where, signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword, onAuthStateChanged } from '../firebase/config';\nimport { loginService } from './loginService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [allUsers, setAllUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Función para obtener datos adicionales del usuario\n  const fetchUserProfile = async uid => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', uid));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (err) {\n      console.error(\"Error fetching user profile:\", err);\n      return null;\n    }\n  };\n\n  // Función para obtener todos los usuarios (solo admin)\n  const fetchAllUsers = async () => {\n    try {\n      const q = query(collection(db, 'users'));\n      const querySnapshot = await getDocs(q);\n      const users = [];\n      querySnapshot.forEach(doc => {\n        users.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      setAllUsers(users);\n    } catch (err) {\n      console.error(\"Error fetching users:\", err);\n      setError(\"Error al cargar la lista de usuarios\");\n    }\n  };\n\n  // Login con email y password\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const additionalData = await fetchUserProfile(userCredential.user.uid);\n\n      // Registrar el login\n      await loginService.recordLogin(email);\n      const userData = {\n        ...userCredential.user,\n        role: (additionalData === null || additionalData === void 0 ? void 0 : additionalData.role) || 'user',\n        name: (additionalData === null || additionalData === void 0 ? void 0 : additionalData.name) || email.split('@')[0]\n      };\n      setCurrentUser(userData);\n      setUserProfile(additionalData);\n      if (userData.role === 'admin') {\n        await fetchAllUsers();\n      }\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (err) {\n      let message = 'Error al iniciar sesión';\n      switch (err.code) {\n        case 'auth/user-not-found':\n          message = 'Usuario no registrado';\n          break;\n        case 'auth/wrong-password':\n          message = 'Contraseña incorrecta';\n          break;\n        case 'auth/too-many-requests':\n          message = 'Cuenta temporalmente bloqueada';\n          break;\n        default:\n          message = err.message;\n      }\n      setError(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cerrar sesión\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      setCurrentUser(null);\n      setUserProfile(null);\n      setAllUsers([]);\n    } catch (err) {\n      console.error(\"Error al cerrar sesión:\", err);\n      setError(\"Error al cerrar sesión\");\n    }\n  };\n\n  // Registrar nuevo usuario\n  const register = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const userProfile = {\n        email,\n        name: userData.name || email.split('@')[0],\n        role: userData.role || 'user',\n        createdAt: new Date().toISOString(),\n        ...userData\n      };\n      await setDoc(doc(db, 'users', userCredential.user.uid), userProfile);\n      const newUser = {\n        ...userCredential.user,\n        ...userProfile\n      };\n      if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin') {\n        await fetchAllUsers();\n      }\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (err) {\n      let message = 'Error al registrar usuario';\n      switch (err.code) {\n        case 'auth/email-already-in-use':\n          message = 'El email ya está registrado';\n          break;\n        case 'auth/weak-password':\n          message = 'La contraseña debe tener al menos 6 caracteres';\n          break;\n        case 'auth/invalid-email':\n          message = 'Email inválido';\n          break;\n        default:\n          message = err.message;\n      }\n      setError(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Efecto para manejar cambios de autenticación\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        const additionalData = await fetchUserProfile(user.uid);\n        const userData = {\n          ...user,\n          role: (additionalData === null || additionalData === void 0 ? void 0 : additionalData.role) || 'user',\n          name: (additionalData === null || additionalData === void 0 ? void 0 : additionalData.name) || user.email.split('@')[0]\n        };\n        setCurrentUser(userData);\n        setUserProfile(additionalData);\n        if (userData.role === 'admin') {\n          await fetchAllUsers();\n        }\n      } else {\n        setCurrentUser(null);\n        setUserProfile(null);\n        setAllUsers([]);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Valor del contexto\n  const value = {\n    user: currentUser,\n    userProfile,\n    users: allUsers,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    refreshUsers: fetchAllUsers,\n    isAuthenticated: !!currentUser,\n    isAdmin: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin',\n    clearError: () => setError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"JO9P+fty4tD6ON+aFWbqrI99rjU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe usarse dentro de un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","auth","db","doc","setDoc","getDoc","collection","getDocs","query","where","signInWithEmailAndPassword","signOut","createUserWithEmailAndPassword","onAuthStateChanged","loginService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","userProfile","setUserProfile","allUsers","setAllUsers","loading","setLoading","error","setError","fetchUserProfile","uid","userDoc","exists","data","err","console","fetchAllUsers","q","querySnapshot","users","forEach","push","id","login","email","password","userCredential","additionalData","user","recordLogin","userData","role","name","split","success","message","code","logout","register","createdAt","Date","toISOString","newUser","unsubscribe","value","refreshUsers","isAuthenticated","isAdmin","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Didi/login-react/src/auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { \r\n  auth,\r\n  db,\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  createUserWithEmailAndPassword,\r\n  onAuthStateChanged\r\n} from '../firebase/config';\r\nimport { loginService } from './loginService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Función para obtener datos adicionales del usuario\r\n  const fetchUserProfile = async (uid) => {\r\n    try {\r\n      const userDoc = await getDoc(doc(db, 'users', uid));\r\n      return userDoc.exists() ? userDoc.data() : null;\r\n    } catch (err) {\r\n      console.error(\"Error fetching user profile:\", err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Función para obtener todos los usuarios (solo admin)\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const q = query(collection(db, 'users'));\r\n      const querySnapshot = await getDocs(q);\r\n      const users = [];\r\n      querySnapshot.forEach((doc) => {\r\n        users.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      setAllUsers(users);\r\n    } catch (err) {\r\n      console.error(\"Error fetching users:\", err);\r\n      setError(\"Error al cargar la lista de usuarios\");\r\n    }\r\n  };\r\n\r\n  // Login con email y password\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      const additionalData = await fetchUserProfile(userCredential.user.uid);\r\n      \r\n      // Registrar el login\r\n      await loginService.recordLogin(email);\r\n      \r\n      const userData = {\r\n        ...userCredential.user,\r\n        role: additionalData?.role || 'user',\r\n        name: additionalData?.name || email.split('@')[0]\r\n      };\r\n      \r\n      setCurrentUser(userData);\r\n      setUserProfile(additionalData);\r\n      \r\n      if (userData.role === 'admin') {\r\n        await fetchAllUsers();\r\n      }\r\n      \r\n      return { success: true, user: userData };\r\n    } catch (err) {\r\n      let message = 'Error al iniciar sesión';\r\n      switch (err.code) {\r\n        case 'auth/user-not-found': message = 'Usuario no registrado'; break;\r\n        case 'auth/wrong-password': message = 'Contraseña incorrecta'; break;\r\n        case 'auth/too-many-requests': message = 'Cuenta temporalmente bloqueada'; break;\r\n        default: message = err.message;\r\n      }\r\n      setError(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cerrar sesión\r\n  const logout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      setCurrentUser(null);\r\n      setUserProfile(null);\r\n      setAllUsers([]);\r\n    } catch (err) {\r\n      console.error(\"Error al cerrar sesión:\", err);\r\n      setError(\"Error al cerrar sesión\");\r\n    }\r\n  };\r\n\r\n  // Registrar nuevo usuario\r\n  const register = async (email, password, userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      const userProfile = {\r\n        email,\r\n        name: userData.name || email.split('@')[0],\r\n        role: userData.role || 'user',\r\n        createdAt: new Date().toISOString(),\r\n        ...userData\r\n      };\r\n      \r\n      await setDoc(doc(db, 'users', userCredential.user.uid), userProfile);\r\n      \r\n      const newUser = {\r\n        ...userCredential.user,\r\n        ...userProfile\r\n      };\r\n      \r\n      if (currentUser?.role === 'admin') {\r\n        await fetchAllUsers();\r\n      }\r\n      \r\n      return { success: true, user: newUser };\r\n    } catch (err) {\r\n      let message = 'Error al registrar usuario';\r\n      switch (err.code) {\r\n        case 'auth/email-already-in-use': message = 'El email ya está registrado'; break;\r\n        case 'auth/weak-password': message = 'La contraseña debe tener al menos 6 caracteres'; break;\r\n        case 'auth/invalid-email': message = 'Email inválido'; break;\r\n        default: message = err.message;\r\n      }\r\n      setError(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Efecto para manejar cambios de autenticación\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        const additionalData = await fetchUserProfile(user.uid);\r\n        const userData = {\r\n          ...user,\r\n          role: additionalData?.role || 'user',\r\n          name: additionalData?.name || user.email.split('@')[0]\r\n        };\r\n        \r\n        setCurrentUser(userData);\r\n        setUserProfile(additionalData);\r\n        \r\n        if (userData.role === 'admin') {\r\n          await fetchAllUsers();\r\n        }\r\n      } else {\r\n        setCurrentUser(null);\r\n        setUserProfile(null);\r\n        setAllUsers([]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Valor del contexto\r\n  const value = {\r\n    user: currentUser,\r\n    userProfile,\r\n    users: allUsers,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    register,\r\n    refreshUsers: fetchAllUsers,\r\n    isAuthenticated: !!currentUser,\r\n    isAdmin: currentUser?.role === 'admin',\r\n    clearError: () => setError(null)\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe usarse dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}