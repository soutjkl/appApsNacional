{"ast":null,"code":"// Simulación de API para autenticación\nexport const authService = {\n  async login(username, password) {\n    // Simular retraso de red\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Credenciales válidas (en un caso real, esto vendría del backend)\n    const validUsers = [{\n      username: 'admin',\n      password: '12345',\n      name: 'Administrador'\n    }, {\n      username: 'user1',\n      password: '54321',\n      name: 'Usuario Demo'\n    }];\n    const user = validUsers.find(u => u.username === username && u.password === password);\n    if (user) {\n      return {\n        success: true,\n        data: {\n          username: user.username,\n          name: user.name\n        }\n      };\n    }\n    return {\n      success: false,\n      message: 'Credenciales incorrectas'\n    };\n  },\n  async register(userData) {\n    // Simular retraso de red\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Validación simple\n    if (!userData.username || !userData.password || !userData.name) {\n      return {\n        success: false,\n        message: 'Todos los campos son requeridos'\n      };\n    }\n    if (userData.password.length < 5) {\n      return {\n        success: false,\n        message: 'La contraseña debe tener al menos 5 caracteres'\n      };\n    }\n\n    // En una app real, aquí haríamos la petición al backend\n    return {\n      success: true,\n      data: {\n        username: userData.username,\n        name: userData.name\n      }\n    };\n  }\n};","map":{"version":3,"names":["authService","login","username","password","Promise","resolve","setTimeout","validUsers","name","user","find","u","success","data","message","register","userData","length"],"sources":["C:/Users/Didi/login-react/src/auth/authService.js"],"sourcesContent":["// Simulación de API para autenticación\r\nexport const authService = {\r\n  async login(username, password) {\r\n    // Simular retraso de red\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Credenciales válidas (en un caso real, esto vendría del backend)\r\n    const validUsers = [\r\n      { username: 'admin', password: '12345', name: 'Administrador' },\r\n      { username: 'user1', password: '54321', name: 'Usuario Demo' }\r\n    ];\r\n    \r\n    const user = validUsers.find(u => \r\n      u.username === username && u.password === password\r\n    );\r\n    \r\n    if (user) {\r\n      return { success: true, data: { username: user.username, name: user.name } };\r\n    }\r\n    return { success: false, message: 'Credenciales incorrectas' };\r\n  },\r\n\r\n  async register(userData) {\r\n    // Simular retraso de red\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Validación simple\r\n    if (!userData.username || !userData.password || !userData.name) {\r\n      return { success: false, message: 'Todos los campos son requeridos' };\r\n    }\r\n    \r\n    if (userData.password.length < 5) {\r\n      return { success: false, message: 'La contraseña debe tener al menos 5 caracteres' };\r\n    }\r\n    \r\n    // En una app real, aquí haríamos la petición al backend\r\n    return { \r\n      success: true, \r\n      data: { \r\n        username: userData.username, \r\n        name: userData.name \r\n      } \r\n    };\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;IAEtD;IACA,MAAME,UAAU,GAAG,CACjB;MAAEL,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE,OAAO;MAAEK,IAAI,EAAE;IAAgB,CAAC,EAC/D;MAAEN,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE,OAAO;MAAEK,IAAI,EAAE;IAAe,CAAC,CAC/D;IAED,MAAMC,IAAI,GAAGF,UAAU,CAACG,IAAI,CAACC,CAAC,IAC5BA,CAAC,CAACT,QAAQ,KAAKA,QAAQ,IAAIS,CAAC,CAACR,QAAQ,KAAKA,QAC5C,CAAC;IAED,IAAIM,IAAI,EAAE;MACR,OAAO;QAAEG,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;UAAEX,QAAQ,EAAEO,IAAI,CAACP,QAAQ;UAAEM,IAAI,EAAEC,IAAI,CAACD;QAAK;MAAE,CAAC;IAC9E;IACA,OAAO;MAAEI,OAAO,EAAE,KAAK;MAAEE,OAAO,EAAE;IAA2B,CAAC;EAChE,CAAC;EAED,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB;IACA,MAAM,IAAIZ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;IAEtD;IACA,IAAI,CAACW,QAAQ,CAACd,QAAQ,IAAI,CAACc,QAAQ,CAACb,QAAQ,IAAI,CAACa,QAAQ,CAACR,IAAI,EAAE;MAC9D,OAAO;QAAEI,OAAO,EAAE,KAAK;QAAEE,OAAO,EAAE;MAAkC,CAAC;IACvE;IAEA,IAAIE,QAAQ,CAACb,QAAQ,CAACc,MAAM,GAAG,CAAC,EAAE;MAChC,OAAO;QAAEL,OAAO,EAAE,KAAK;QAAEE,OAAO,EAAE;MAAiD,CAAC;IACtF;;IAEA;IACA,OAAO;MACLF,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJX,QAAQ,EAAEc,QAAQ,CAACd,QAAQ;QAC3BM,IAAI,EAAEQ,QAAQ,CAACR;MACjB;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}