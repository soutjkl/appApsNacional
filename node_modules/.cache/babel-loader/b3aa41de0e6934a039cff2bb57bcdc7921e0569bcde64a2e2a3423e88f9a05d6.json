{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Didi\\\\login-react\\\\src\\\\auth\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { auth, db } from '../firebase/config';\nimport { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userData, setUserData] = useState(null); // Datos adicionales del usuario (rol)\n\n  //Función para verificar si el usuario es admin\n  const isAdmin = () => {\n    return (userData === null || userData === void 0 ? void 0 : userData.role) === 'admin'; // Si userData.role = \"admin\" → true\n  };\n\n  //Registrar nuevo usuario (solo para admins)\n  const registerUser = async (email, password, name, role = 'user') => {\n    if (!isAdmin()) throw new Error('Solo administradores pueden registrar usuarios');\n    try {\n      // 1. Crear usuario en Authentication\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n      // 2. Guardar datos en Firestore (colección \"users\")\n      await setDoc(doc(db, \"users\", userCredential.user.uid), {\n        email,\n        name,\n        role,\n        // \"admin\" o \"user\"\n        createdAt: serverTimestamp(),\n        lastLogin: null\n      });\n      return userCredential.user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //Cargar datos del usuario al iniciar sesión\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        // Obtener datos de Firestore (colección \"users\")\n        const userDoc = await getDoc(doc(db, \"users\", user.uid));\n        setUserData(userDoc.data()); // Guarda el rol (admin/user)\n      } else {\n        setUserData(null);\n      }\n      setCurrentUser(user);\n    });\n    return unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      userData,\n      isAdmin,\n      registerUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"SIdi9JYVrX4q658hn6gpByug9Fg=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["auth","db","doc","getDoc","setDoc","serverTimestamp","jsxDEV","_jsxDEV","AuthProvider","children","_s","currentUser","setCurrentUser","useState","userData","setUserData","isAdmin","role","registerUser","email","password","name","Error","userCredential","createUserWithEmailAndPassword","user","uid","createdAt","lastLogin","error","useEffect","unsubscribe","onAuthStateChanged","userDoc","data","AuthContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Didi/login-react/src/auth/AuthContext.js"],"sourcesContent":["import { auth, db } from '../firebase/config';\r\nimport { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userData, setUserData] = useState(null); // Datos adicionales del usuario (rol)\r\n\r\n  //Función para verificar si el usuario es admin\r\n  const isAdmin = () => {\r\n    return userData?.role === 'admin'; // Si userData.role = \"admin\" → true\r\n  };\r\n\r\n  //Registrar nuevo usuario (solo para admins)\r\n  const registerUser = async (email, password, name, role = 'user') => {\r\n    if (!isAdmin()) throw new Error('Solo administradores pueden registrar usuarios');\r\n\r\n    try {\r\n      // 1. Crear usuario en Authentication\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      // 2. Guardar datos en Firestore (colección \"users\")\r\n      await setDoc(doc(db, \"users\", userCredential.user.uid), {\r\n        email,\r\n        name,\r\n        role, // \"admin\" o \"user\"\r\n        createdAt: serverTimestamp(),\r\n        lastLogin: null,\r\n      });\r\n      \r\n      return userCredential.user;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  //Cargar datos del usuario al iniciar sesión\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        // Obtener datos de Firestore (colección \"users\")\r\n        const userDoc = await getDoc(doc(db, \"users\", user.uid));\r\n        setUserData(userDoc.data()); // Guarda el rol (admin/user)\r\n      } else {\r\n        setUserData(null);\r\n      }\r\n      setCurrentUser(user);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      currentUser,\r\n      userData,\r\n      isAdmin,\r\n      registerUser,\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,EAAE,QAAQ,oBAAoB;AAC7C,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMG,OAAO,GAAGA,CAAA,KAAM;IACpB,OAAO,CAAAF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,IAAI,MAAK,OAAO,CAAC,CAAC;EACrC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEJ,IAAI,GAAG,MAAM,KAAK;IACnE,IAAI,CAACD,OAAO,CAAC,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,gDAAgD,CAAC;IAEjF,IAAI;MACF;MACA,MAAMC,cAAc,GAAG,MAAMC,8BAA8B,CAACxB,IAAI,EAAEmB,KAAK,EAAEC,QAAQ,CAAC;;MAElF;MACA,MAAMhB,MAAM,CAACF,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEsB,cAAc,CAACE,IAAI,CAACC,GAAG,CAAC,EAAE;QACtDP,KAAK;QACLE,IAAI;QACJJ,IAAI;QAAE;QACNU,SAAS,EAAEtB,eAAe,CAAC,CAAC;QAC5BuB,SAAS,EAAE;MACb,CAAC,CAAC;MAEF,OAAOL,cAAc,CAACE,IAAI;IAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACAC,SAAS,CAAC,MAAM;IACd,MAAMC,WAAW,GAAGC,kBAAkB,CAAChC,IAAI,EAAE,MAAOyB,IAAI,IAAK;MAC3D,IAAIA,IAAI,EAAE;QACR;QACA,MAAMQ,OAAO,GAAG,MAAM9B,MAAM,CAACD,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEwB,IAAI,CAACC,GAAG,CAAC,CAAC;QACxDX,WAAW,CAACkB,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLnB,WAAW,CAAC,IAAI,CAAC;MACnB;MACAH,cAAc,CAACa,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOM,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExB,OAAA,CAAC4B,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAE;MAC3B1B,WAAW;MACXG,QAAQ;MACRE,OAAO;MACPE;IACF,CAAE;IAAAT,QAAA,EACCA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CA1DWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}